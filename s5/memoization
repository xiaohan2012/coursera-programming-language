#lang racket
(define fibonacci
  (letrec
      ([memo null] ; memo table should be defined outside of the helper function, as a global variable used by all calling instances
       [f (lambda (x) 
            (let
                ([ans (assoc x memo)])
                 (if ans
                    (cdr ans)
                    (let
                        ([newans (if (or (= x 0) (= x 1))
                                    1
                                    (+ (f (- x 2)) ; this calling did the real computing
                                      (f (- x 1))))]) ; this one get the result from the cache and does only one additional computing
                         (begin 
                           (set! memo (cons (cons x newans) memo))
                           newans)))))])
    f))

(define fibonacci3
  (letrec([memo null] 
          [f (lambda (x)
               (let ([ans (assoc x memo)])
                 (if ans 
                     (cdr ans)
                     (let ([new-ans (if (or (= x 1) (= x 2))
                                        1
                                        (+ (f (- x 1))
                                           (f (- x 2))))])
                       (begin 
                         (set! memo (cons (cons x new-ans) memo))
                         new-ans)))))])
    f))

(define r (fibonacci3 10000))
  