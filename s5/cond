#lang racket
;cond syntax
;(cond
;[e1a e1b]
;[e2a e2b]
;....
;[eNa eNb]

(define ys (list (list 1 2) 3 4 (list 5 (list 6 7)) 8))

(define (sum1 xs) 
  (cond 
    [(null? xs) 0]
    [(number? (car xs)) (+ (car xs) (sum1 (cdr xs)))]
    [#t (+ (sum1 (car xs)) (sum1 (cdr xs)))]))

(define r1 (sum1 ys))

;if and cond treats anything other than #f to be true
;this is a featue of many dynamic typed languages